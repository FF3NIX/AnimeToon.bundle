#!/usr/bin/env python
######################################################################################
import base64

SEARCH_STRINGS = [
	Regex("https?:\/\/.+?googleusercontent.com\/.*(?=(?:\"|\'))"),
	Regex("http.*videozoo\.me.*(?=(?:\"|\'))"),
	Regex("http:\/\/videofun.me\/frames\/(.*)(?=\".\s)"),
	Regex("http:\/\/stream.*(?=\")"),
	Regex("http:\/\/.*videos.*(?=')"),
	Regex("http:\/\/.*dl.*(?=\")"),
	Regex("http:\/\/beta.*(?=')"),
	Regex("http(s?):\/\/.*googlevideo.*(?=')"),
	Regex("http:\/\/.*gateway.*(?=')"),
	Regex("http:\/\/s(.*)(?=\".\s)")
	]

######################################################################################
def MetadataObjectForURL(url):
	"""Loads thumbnail from videofun iframe if available."""

	ep_data = HTML.ElementFromURL(url)
	show_data = HTML.ElementFromURL(ep_data.xpath("//div[@id='slink']/span/span/a/@href")[0])
	ep_title = ep_data.xpath("//div[@id='top_block']/h1/text()")[0].strip()
	show_thumb = show_data.xpath("//img[@id='series_image']/@src")[0]
	show_genres = show_data.xpath("//span[@class='red_box']/a/text()")

	try:
		show_rating = float(show_data.xpath("//span[@id='rating_num']/text()")[0])
	except:
		show_rating = 0.00

	try:
		show_summary = show_data.xpath("//div[@class='right_col']/div/div[2]/div/span[2]/text()")[0].strip()
	except:
		try:
			show_summary = show_data.xpath("//div[@id='series_details']/div[2]/div/text()")[0].strip()
		except:
			show_summary = show_data.xpath("//div[@id='series_details']/div/div/text()")[0].strip()

	return MovieObject(
		title = ep_title,
		thumb = Resource.ContentsOfURLWithFallback(url = show_thumb, fallback='icon-cover.png'),
		summary = show_summary,
		genres = show_genres,
		rating = show_rating,
		source_title = "AnimeToon"
		)

######################################################################################
@deferred
def MediaObjectsForURL(url):
	"""All videos vary in codec and must be transcoded"""

	page_data = HTML.ElementFromURL(url)
	each = page_data.xpath("//div[@id='streams']//iframe/@src")

	for s in each:
		if not 'videozoo.me' in s:
			page_data = HTML.ElementFromURL(s)
			string_data = HTML.StringFromElement(page_data)
			match = False
			for regex in SEARCH_STRINGS:
				match = regex.search(string_data)
				if match:
					url = String.Unquote(match.group(), usePlus=False)
					if 'videozoo' in url:
						url = base64.b64decode(url.split('url=')[1])
					Log.Debug('PlayVideo URL = %s' %url)
					return [MediaObject(parts = [PartObject(key = url)])]

	raise Ex.MediaNotAvailable
